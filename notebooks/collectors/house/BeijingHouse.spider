{
  "metadata" : {
    "id" : "90b545d1-3263-46ba-b9e9-f885e8a31776",
    "name" : "Beijing House Spider",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "2015-01-10T00:02:12.659Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : null,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null,
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "44C028B12E234BD88A96264AEEC2E801"
    },
    "cell_type" : "markdown",
    "source" : "# Beijing House spider"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "051E00657F2041DD8A874D89566D9D2C"
    },
    "cell_type" : "code",
    "source" : [ "import io.github.wtog.processor.{ Page, PageProcessor, RequestHeaders }\n", "import io.github.wtog.spider.Spider\n", "\n", "final case class BaiduPageProcessor() extends PageProcessor {\n", "\n", "  override def process(page: Page): Unit = {\n", "    val document = page.jsoupParser\n", "    page.addPageResultItem(Map(\"title\" -> document.title()))\n", "    page.addTargetRequest(\"http://www.baidu.com\")\n", "  }\n", "\n", "  override def requestHeaders: RequestHeaders = {\n", "    RequestHeaders(\n", "      domain = \"www.baidu.com\",\n", "      headers = Some(Map(\"Content-Type\" -> \"text/html; charset=GB2312\")), useProxy = true)\n", "  }\n", "\n", "  override def targetUrls: List[String] = {\n", "    List(\"http://www.baidu.com\")\n", "  }\n", "}\n", "\n", "Spider(pageProcessor = BaiduPageProcessor()).start()\n" ],
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import io.github.wtog.processor.{Page, PageProcessor, RequestHeaders}\nimport io.github.wtog.spider.Spider\ndefined class BaiduPageProcessor\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<span style=\"color:red;\">Ooops, exception in the cell:\n                    Class io.github.wtog.collector.Repl can not access a member of class $line3.$rendered$ with modifiers &quot;private&quot;\n                  </span><pre style=\"color:#999;\">\n                      java.lang.IllegalAccessException: Class io.github.wtog.collector.Repl can not access a member of class $line3.$rendered$ with modifiers &quot;private&quot;\n\tat sun.reflect.Reflection.ensureMemberAccess(Reflection.java:102)\n\tat java.lang.Class.newInstance(Class.java:436)\n\tat io.github.wtog.collector.Repl.getModule$1(Repl.scala:228)\n\tat io.github.wtog.collector.Repl.liftedTree1$1(Repl.scala:231)\n\tat io.github.wtog.collector.Repl.evaluate(Repl.scala:216)\n\tat notebook.ReplCollector$$anonfun$2$$anon$1$$anonfun$8.replEvaluate$1(ReplCollector.scala:133)\n\tat notebook.ReplCollector$$anonfun$2$$anon$1$$anonfun$8.apply(ReplCollector.scala:145)\n\tat notebook.ReplCollector$$anonfun$2$$anon$1$$anonfun$8.apply(ReplCollector.scala:129)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.liftedTree1$1(Future.scala:24)\n\tat scala.concurrent.impl.Future$PromiseCompletingRunnable.run(Future.scala:24)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:44)\n\tat akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\n\n                    </pre>"
      },
      "output_type" : "execute_result",
      "execution_count" : 1,
      "time" : "Took: 4.034s, at 2018-10-10 23:53"
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "62E24298447748AD8B0BC640ED2EEB13"
    },
    "cell_type" : "code",
    "source" : [ "" ],
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}